/**
 * X-Axis endstop with configurable length
 *
 * This endstop is intended to work with the Prusa i3
 * Smooth X-Axis with threaded rods upgrade by MazaaFIN
 * (see http://www.thingiverse.com/thing:1103976).
 *
 * I use a different x-carriage that did not reach the
 * vanilla endstop from MazaaFINs files, so I replicated
 * it using his measurements in SCAD but made the length
 * configurable.
 *
 * Made in 2017 by Hendrik Busch using the initial work 
 * of MazaaFIN (http://www.thingiverse.com/MazaaFIN/about).
 * Licensed under a Creative Commons - Attribution - Non
 * Commercial License.
 *
 * https://creativecommons.org/licenses/by-nc/3.0/
 */

/**
 * The length of the endstop (in mm on the x-axis). Do not
 * set this to a value lower than 17.
 * 
 * The original part from MazaaFIN has a length of 19mm.
 */
endstopLength = 19;

/**
 * Use this to generate minimal supports for printing. The supports
 * generated by this option are usually enough to print this part
 * without enabling supports in your slicer (given the correct part
 * orientation). To enable supports, set this to true, to disable them,
 * set this to false.
 */
generateSupports = false;

/** 
 * Number of facets in a 360 degree arc, controls smoothness of rounded
 * edges. 32 is a good compromise between smoothness and processing speed.
 */
$fn=32;

rotate([0, 180, 0]) translate([-23, 0, -15]) mainBlock();

module mainBlock() {
    difference() {
        // solid block with rounded edges
        hull() {
            translate([0, endstopLength-1, 0]) cube([1, 1, 15]);
            translate([4, 4, 0]) cylinder(r=4, h=15);
            rotate([270, 0, 0]) translate([21, -2, 0]) cylinder(r=2, h=endstopLength);
            rotate([270, 0, 0]) translate([21, -13, 0]) cylinder(r=2, h=endstopLength);
        }    
        // M8 hole for smooth rod
        rotate([270, 0, 0]) translate([8.5, -7.5, -0.1]) cylinder(d=8.1, h=endstopLength+0.2);
        
        // Microswitch
        union() {
            // Cutout for the microswitch body
            translate([15.5, -0.1, 1]) cube([6, 6, 13.1]);
            
            // Cutout for the cable slot
            translate([19.9, -0.1, 6.5]) cube([3.6, 10.2, 2]);

            // Cutout for the pins
            translate([17, 5.8, 1]) cube([3, 6.2, 13]);
        }
        
        // Angled cutout
        translate([0,0,-0.1]) linear_extrude(height=15.2) polygon(points=[[17, endstopLength + 0.1], [23.1, endstopLength + 0.1], [23.1, 8], [17, 12]]);
    }
    
    // Cable slot on block
    difference() {
        hull() {
            translate([19, endstopLength-2, 10]) cylinder(r=2, h=5);
            translate([19, endstopLength-5, 10]) cylinder(r=2, h=5);
            translate([17, endstopLength-7, 10]) cube([1,7,5]);
        }
        translate([17, endstopLength-5.5, 9.9]) cube([2.5, 4, 5.2]);
        translate([18.9, endstopLength-4.25, 9.9]) cube([2.2, 1.5, 5.2]);
        translate([17, endstopLength, 7])rotate([90, 0, 0]) linear_extrude(height=7) polygon(points=[[0, 0], [0, 3], [4.1, 5], [4.1, 0]]);
    }
    
    // Support structure
    if (generateSupports) {
        color("Red") {
            difference() {
                
                union() {
                    for (offset = [ 0 : 1.6 : 5.6]) {
                        translate([21.5, offset, 6.5]) cube([1.5, 0.8, 2]);
                    }
                    for (offset = [ 6.4 : 1.6 : 10]) {
                        translate([20, offset, 6.5]) cube([3, 0.8, 2]);
                    }
                }
                // Angled cutout
                translate([0,0,-0.1]) linear_extrude(height=15.2) polygon(points=[[17, 12], [23.1, 12], [23.1, 8], [17, 12]]);
            }
            translate([22.6, 0, 14]) cube([0.4, 8, 1]);
            translate([21.8, 0, 14]) cube([0.4, 8, 1]);
        }
    }
}

